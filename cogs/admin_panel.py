from data.db_data.models.admins import Admin
from data.func.functions import require_level
from aiogram import Router, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.filters.command import Command
from data.db_data.db_session import create_session
from data.db_data.models.users import User
from data.db_data.models.posts import Posts
from data.func.buttons.buttonTg import postButShow
from aiogram.fsm.context import FSMContext
from data.func.states import AdminStates, EditPostStates
from data.func.functions import getPost, deletePost, updatePost, getPostAuthor
import logging
from sqlalchemy.exc import SQLAlchemyError


admin = Router()
ADMIN_ID = [1012085977, 1099501680]


async def check_admin(message: Message) -> bool:
    if message.from_user.id not in ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ.")
        return False
    return True


@admin.message(Command("admin"))
async def admin_panel(message: Message):
    if not await check_admin(message):
        return

    await message.answer("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
                         "/admin - –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (1+),\n"
                         "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (1+),\n"
                         "/users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (1+),\n"
                         "/edit_post - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –ø–æ ID (2+),\n"
                         "/set_admin - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (3+),\n"
                         "/delete_admin - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (3+).", reply_markup=postButShow)


@admin.message(Command("stats"))
async def admin_stats(message: Message):
    session = create_session()

    admin = session.query(Admin).filter(
        Admin.user_id == message.from_user.id).first()
    if not admin or admin.level < 1:
        return await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

    db = create_session()
    total_users = db.query(User).count()
    total_posts = db.query(Posts).count()
    db.close()

    await message.answer(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n–ü–æ—Å—Ç–æ–≤: {total_posts}")


@admin.message(Command("users"))
async def admin_users(message: Message):
    session = create_session()


    admin = session.query(Admin).filter(
        Admin.user_id == message.from_user.id).first()
    if not admin or admin.level < 1:
        return await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

    db = create_session()
    users = db.query(User).all()
    db.close()

    if not users:
        return await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    user_list = "\n".join([f"ID: {user.id} - @{user.name}" for user in users])
    await message.answer(f"üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_list}")


@admin.message(Command("edit_post"))
async def admin_edit_post(message: Message, state: FSMContext):
    session = create_session()

    admin = session.query(Admin).filter(
        Admin.user_id == message.from_user.id).first()
    if not admin or admin.level < 2:
        return await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ ID –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    await state.set_state(AdminStates.waiting_for_post_id)


@admin.message(AdminStates.waiting_for_post_id)
async def admin_handle_post_id(message: Message, state: FSMContext):
    post_id = message.text.strip()
    db_post = await getPost(post_id)

    if not db_post:
        await message.answer(f"‚ùå –ü–æ—Å—Ç —Å ID {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    await state.update_data(post_id=db_post.id)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="admin_delete_post")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                              callback_data="admin_edit_post_text")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_cancel")]
    ])
    await message.answer(f"–ü–æ—Å—Ç: **{db_post.namePost}**\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard, parse_mode="markdown")


@admin.callback_query(F.data == "admin_delete_post")
async def handle_admin_delete(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    post_id = data.get("post_id")

    try:
        db_post = await getPost(post_id)
        if await deletePost(post_id):
            await callback.message.edit_text(f"üóë –ü–æ—Å—Ç **{db_post.namePost}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", parse_mode="markdown")
        else:
            await callback.message.edit_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except SQLAlchemyError as e:
        logging.error(f"Database error in admin_delete_post: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞.")
    finally:
        await state.clear()
        await callback.answer()


@admin.callback_query(F.data == "admin_edit_post_text")
async def handle_admin_edit(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    post_id = data.get("post_id")

    edit_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ",
                                 callback_data=f"edit_title_{post_id}"),
            InlineKeyboardButton(
                text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_desc_{post_id}")
        ],
        [
            InlineKeyboardButton(
                text="‚≠ê –†–µ–π—Ç–∏–Ω–≥", callback_data=f"edit_rating_{post_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")
        ]
    ])

    try:
        db_post = await getPost(post_id)
        db_author = await getPostAuthor(post_id)
        if db_post:
            await callback.message.answer(
                f"<b>–¢–µ–∫—É—â–∏–π –ø–æ—Å—Ç:</b>\n"
                f"<b>{db_post.namePost}</b>\n"
                f"<i>–û–ø–∏—Å–∞–Ω–∏–µ:</i> {db_post.descPost}\n"
                f"<i>–†–µ–π—Ç–∏–Ω–≥:</i> ‚≠ê {db_post.rating}\n"
                f"<i>–ê–≤—Ç–æ—Ä:</i> üë§ @{db_author.name}\n\n"
                f"<b>–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?</b>",
                reply_markup=edit_keyboard,
                parse_mode="HTML"
            )

    except Exception as e:
        logging.error(f"Database error in admin_edit_post_text: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞.")
        await state.clear()

    finally:
        await callback.answer()



@admin.callback_query(F.data.startswith("edit_title_"))
async def process_edit_title(callback: CallbackQuery, state: FSMContext):
    post_id = callback.data.split("_")[2]
    await state.update_data(post_id=post_id)

    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")
        ]])
    )
    await state.set_state(EditPostStates.waiting_for_title)
    await callback.answer()


@admin.callback_query(F.data.startswith("edit_desc_"))
async def process_edit_description(callback: CallbackQuery, state: FSMContext):
    post_id = callback.data.split("_")[2]
    await state.update_data(post_id=post_id)

    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")
        ]])
    )
    await state.set_state(EditPostStates.waiting_for_description)
    await callback.answer()



@admin.callback_query(F.data.startswith("edit_rating_"))
async def process_edit_rating(callback: CallbackQuery, state: FSMContext):
    post_id = callback.data.split("_")[2]
    await state.update_data(post_id=post_id)

    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ—Å—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")
        ]])
    )
    await state.set_state(EditPostStates.waiting_for_rating)
    await callback.answer()



@admin.message(EditPostStates.waiting_for_title)
async def save_new_title(message: Message, state: FSMContext):
    new_title = message.text
    data = await state.get_data()
    post_id = data.get("post_id")

    try:
        await updatePost(post_id, namePost=new_title)
        await message.answer(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {new_title}",
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"Database error while updating title: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞.")

    await state.clear()



@admin.message(EditPostStates.waiting_for_description)
async def save_new_description(message: Message, state: FSMContext):
    new_description = message.text
    data = await state.get_data()
    post_id = data.get("post_id")

    try:
        await updatePost(post_id, descPost=new_description)
        await message.answer(
            f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {new_description}",
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"Database error while updating description: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–∞.")

    await state.clear()



@admin.message(EditPostStates.waiting_for_rating)
async def save_new_rating(message: Message, state: FSMContext):
    try:
        new_rating = int(message.text)
        

        data = await state.get_data()
        post_id = data.get("post_id")

        await updatePost(post_id, rating=new_rating)
        await message.answer(
            f"‚úÖ –†–µ–π—Ç–∏–Ω–≥ –ø–æ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n–ù–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: ‚≠ê {new_rating}",
            parse_mode="HTML"
        )

    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞!")
    except Exception as e:
        logging.error(f"Database error while updating rating: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ—Å—Ç–∞.")

    await state.clear()



@admin.callback_query(F.data == "cancel_edit")
async def cancel_edit(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await callback.answer()


@admin.callback_query(F.data == "admin_cancel")
async def handle_admin_cancel(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await callback.answer()


@admin.message(F.text.startswith("/set_admin"))
async def set_admin(message: Message):
    session = create_session()

    try:
        admin = session.query(Admin).filter(
            Admin.user_id == message.from_user.id).first()
        if not admin or admin.level < 3:
            return await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

        try:
            _, uid_str, level_str = message.text.split()
            uid = int(uid_str)
            level = int(level_str)
        except:
            return await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_admin <user_id> <—É—Ä–æ–≤–µ–Ω—å (1-3)>")

        target = session.query(Admin).filter(Admin.user_id == uid).first()
        if target:
            target.level = level
        else:
            new_admin = Admin(user_id=uid, level=level)
            session.add(new_admin)

        session.commit()
        await message.reply(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω —É—Ä–æ–≤–µ–Ω—å {level} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")

    except Exception as e:
        session.rollback()
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø—Ä–∞–≤.")
    finally:
        session.close()


@admin.message(F.text.startswith("/delete_admin"))
async def delete_admin(message: Message):
    session = create_session()

    try:
        admin = session.query(Admin).filter(
            Admin.user_id == message.from_user.id).first()
        if not admin or admin.level < 3:
            return await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

        try:
            _, uid_str = message.text.split()
            uid = int(uid_str)
        except:
            return await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_admin <user_id>")

        target = session.query(Admin).filter(Admin.user_id == uid).first()
        if not target:
            return await message.reply("‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        session.delete(target)
        session.commit()
        await message.reply(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {uid} –±—ã–ª —É–¥–∞–ª–µ–Ω")

    except Exception as e:
        session.rollback()
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–∞–≤.")
    finally:
        session.close()
