from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram import Router, F
import logging
from data.func.functions import getPost
from aiogram.types import CallbackQuery
from data.db_data.db_session import create_session
from data.db_data.models.users import User
from data.db_data.models.posts import Posts
from data.func.buttons.buttonTg import postButShow


post = Router()


@post.callback_query(F.data.startswith("open_post_"))
async def open_post_callback(callback: CallbackQuery):
    try:
        post_id = callback.data.split("_")[-1]
        post = await getPost(post_id)

        if post:
            db = create_session()
            user = db.query(User).filter(User.id == post.userId).first()
            db.close()

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data=f"comments_{post.id}"),
                InlineKeyboardButton(text='‚≠ê –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫', callback_data=f'like_{post.id}')],
                [InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥", callback_data="menu")]
            ])

            await callback.message.answer(
                f"<b>{post.namePost}</b>\n"
                f"<i>–û–ø–∏—Å–∞–Ω–∏–µ:</i> {post.descPost}\n"
                f"<i>–†–µ–π—Ç–∏–Ω–≥:</i> ‚≠ê {post.rating}\n"
                f"<i>–ê–≤—Ç–æ—Ä:</i> üë§ @{user.name}",
                reply_markup=keyboard,
                parse_mode="HTML"
            )

            await callback.answer()
        else:
            await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ—Å—Ç–∞.", show_alert=True)
